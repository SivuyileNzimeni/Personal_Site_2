{
  "hash": "41b8f4a0b4e8354761c807b1dc6bb445",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Spam Emails\"\nlang: \"en-GB\"\ndate: \"August 18,2023\"\nauthor: \"Sivuyile Nzimeni\"\nimage: \"./Spam_Detection.png\"\nimage-alt: \"An image illustrating an email folder classified as either spam or not.\"\ndescription: \"This post is about building a classification model for spam email detection. We explore a solution for handling an imbalanced dataset.\" \ncategories: [data modelling,data cleaning,visualisation]\nfig-dpi: 300\nfig-align: 'center'\nfig-cap-location: 'top'\ncode-copy: true\ncode-line-numbers: true\npage-layout: 'article'\ncap-location: 'margin'\nnumber-sections: true\ntoc: true\nlot: true\nlof: true\ntoc-title: 'CONTENTS'\nexecute: \n  echo: true\n  warning: false\n  message: false\n---\n\n\n# INTRODUCTION\n\nThe [TidyTuesday](https://github.com/rfordatascience/tidytuesday) project is a weekly social data project. Each week an interesting dataset is shared with the community for members to clean, model and or visualise data. People are encouraged to share their code and posts through social media. In essence, it serves as good avenue to explore one's data skills and to learn with others. This week (2023/08/14), the dataset is comprised of spam and non-spam emails originating from [UCI Machine Learning Repository](http://archive.ics.uci.edu/dataset/94/spambase).\n\n## IMPORT DATA\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlapply(c(\"tidyverse\",\"janitor\",\"ggthemes\",\n         \"glmnet\",\"tidymodels\",\"vip\",\"ranger\",\n         \"themis\",\"gt\",\"gtExtras\"),\n       require,character.only = TRUE) |> \n  suppressWarnings() |> \n  suppressMessages() |> \n  invisible() # <1>\n\nEmails <- read.csv(file = \"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2023/2023-08-15/spam.csv\") |> \n  clean_names() # <2>\n\ntheme_set(theme_minimal()) # <3>\nset.seed(2023)\n```\n:::\n\n\n1.  We load our preferred R packages. This style of loading packages is not standard. It helps to silence some of the messages and conflict warnings when loading meta packages such as `tidyverse` and `tidymodels`.\n\n2.  We import data from the tidytuesday github repository. Again, the use of `read.csv` in place of `read_csv` or other functions boils down to preference.\n\n3.  The `theme_set` function lets us select a theme for our visualisations.\n\nWe also import a number of auxilary packages to assist in the analysis. The imported data is relatively small only comprising of 4601 rows and 7 columns. Our outcome variable is `yesno`,i.e. Spam/Not Spam email. The remaining variables contains derived variables, frequency counts. These are essentials tallies of references to money, currency and exclamation marks (oddly named `bang`). The dataset presents a classification problem. We start by scaling the numeric variables.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nEmails[,-grep(\"yesno\",names(Emails))] <-  sapply(Emails[,sapply(Emails,is.numeric)],\n       function(x){\n         scale(x,center = TRUE,scale = TRUE) \n       }) # <1>\n```\n:::\n\n\n1.  Use `<-` as your separator between the right-hand-side and the left-hand-side of the code. On the left-hand-side, we select all variables except the target variable except the outcome variable. On the right-hand-side, we use a nested `sapply` function to subset only for predictor variables. Thereafter, we subset columns that are of type numeric. Finally, we call an anonymous function via `function(x)` and pass each variable through then scale function.\n\nIt appears convoluted. However, it completes a set of sub-setting and applies functions simultaneously. It is better practice to first define a function and sapply.\n\n## DATA SPLITTING\n\nPart of the data splitting involves some decisions about whether to stratify the outcome variable. Especially with an imbalanced dataset, it is important to have sufficient representation of the minority cases without leaking the outcomes in the training process. Next, we can do some data splitting into a training and testing set, stratified over the outcome variable. The `rsample` package serves a set of convenient function for the task. The majority of emails (60.56%) are not spam.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nData_Split <- initial_split(Emails,strata=yesno)\nData_Train <- training(Data_Split)\nData_Test <- testing(Data_Split)\n\n100/nrow(Data_Train)*table(Data_Train$yesno)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n      n       y \n60.6087 39.3913 \n```\n\n\n:::\n:::\n\n\n## MODEL FITTING\n\nTo\n\n\n::: {.cell}\n\n```{.r .cell-code}\nX_Train <- model.matrix(yesno ~.,data =Data_Train)[,-1]\nY_Train <- as.numeric(Data_Train$yesno==\"y\")\n\n\nRanger_Model <- ranger(x=X_Train,\n       y = Y_Train,\n       verbose = TRUE,\n       importance = \"impurity\",\n       splitrule = \"gini\",\n       seed = 2023,\n       classification = TRUE)\n\nRanger_Model$confusion.matrix \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    predicted\ntrue    0    1\n   0 1974  117\n   1  296 1063\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nElastic_Net <- cv.glmnet(x=X_Train,\n                      y=Y_Train,\n                      alpha =0,\n                      family = \"binomial\",\n                      nfolds = 10,\n                      type.measure = \"class\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nTraining_Performance <- assess.glmnet(Elastic_Net,\n              newx=X_Train,\n              newy=Y_Train)\n\nFinal_Model <- glmnet(x=X_Train,\n                      y = Y_Train,\n                      lambda = min(Elastic_Net$lambda),\n                      alpha = 0,\n                      family = \"binomial\",\n                      standardize = FALSE)\n\n\nTraining_Performance <- data.frame(lapply(Training_Performance,unlist))\n\nrownames(Training_Performance) <- NULL\n\nTraining_Performance |> \n  gt() |> \n  tab_header(title = \"2023 Initial ElasticNet Model\",\n             subtitle = \"Training Model Performance\") |> \n  gt_theme_espn()\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div id=\"oxmraffbak\" style=\"padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;\">\n<style>@import url(\"https://fonts.googleapis.com/css2?family=Lato:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap\");\n#oxmraffbak table {\n  font-family: Lato, system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji';\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n#oxmraffbak thead, #oxmraffbak tbody, #oxmraffbak tfoot, #oxmraffbak tr, #oxmraffbak td, #oxmraffbak th {\n  border-style: none;\n}\n\n#oxmraffbak p {\n  margin: 0;\n  padding: 0;\n}\n\n#oxmraffbak .gt_table {\n  display: table;\n  border-collapse: collapse;\n  line-height: normal;\n  margin-left: auto;\n  margin-right: auto;\n  color: #333333;\n  font-size: 16px;\n  font-weight: normal;\n  font-style: normal;\n  background-color: #FFFFFF;\n  width: auto;\n  border-top-style: solid;\n  border-top-width: 3px;\n  border-top-color: #FFFFFF;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #A8A8A8;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n}\n\n#oxmraffbak .gt_caption {\n  padding-top: 4px;\n  padding-bottom: 4px;\n}\n\n#oxmraffbak .gt_title {\n  color: #333333;\n  font-size: 24px;\n  font-weight: initial;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-color: #FFFFFF;\n  border-bottom-width: 0;\n}\n\n#oxmraffbak .gt_subtitle {\n  color: #333333;\n  font-size: 85%;\n  font-weight: initial;\n  padding-top: 3px;\n  padding-bottom: 5px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-color: #FFFFFF;\n  border-top-width: 0;\n}\n\n#oxmraffbak .gt_heading {\n  background-color: #FFFFFF;\n  text-align: left;\n  border-bottom-color: #FFFFFF;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#oxmraffbak .gt_bottom_border {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#oxmraffbak .gt_col_headings {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#oxmraffbak .gt_col_heading {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 80%;\n  font-weight: bolder;\n  text-transform: uppercase;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 6px;\n  padding-left: 5px;\n  padding-right: 5px;\n  overflow-x: hidden;\n}\n\n#oxmraffbak .gt_column_spanner_outer {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 80%;\n  font-weight: bolder;\n  text-transform: uppercase;\n  padding-top: 0;\n  padding-bottom: 0;\n  padding-left: 4px;\n  padding-right: 4px;\n}\n\n#oxmraffbak .gt_column_spanner_outer:first-child {\n  padding-left: 0;\n}\n\n#oxmraffbak .gt_column_spanner_outer:last-child {\n  padding-right: 0;\n}\n\n#oxmraffbak .gt_column_spanner {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 5px;\n  overflow-x: hidden;\n  display: inline-block;\n  width: 100%;\n}\n\n#oxmraffbak .gt_spanner_row {\n  border-bottom-style: hidden;\n}\n\n#oxmraffbak .gt_group_heading {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 80%;\n  font-weight: bolder;\n  text-transform: uppercase;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  text-align: left;\n}\n\n#oxmraffbak .gt_empty_group_heading {\n  padding: 0.5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 80%;\n  font-weight: bolder;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: middle;\n}\n\n#oxmraffbak .gt_from_md > :first-child {\n  margin-top: 0;\n}\n\n#oxmraffbak .gt_from_md > :last-child {\n  margin-bottom: 0;\n}\n\n#oxmraffbak .gt_row {\n  padding-top: 7px;\n  padding-bottom: 7px;\n  padding-left: 5px;\n  padding-right: 5px;\n  margin: 10px;\n  border-top-style: solid;\n  border-top-width: 1px;\n  border-top-color: #F6F7F7;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  overflow-x: hidden;\n}\n\n#oxmraffbak .gt_stub {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 80%;\n  font-weight: bolder;\n  text-transform: uppercase;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#oxmraffbak .gt_stub_row_group {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n  vertical-align: top;\n}\n\n#oxmraffbak .gt_row_group_first td {\n  border-top-width: 2px;\n}\n\n#oxmraffbak .gt_row_group_first th {\n  border-top-width: 2px;\n}\n\n#oxmraffbak .gt_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#oxmraffbak .gt_first_summary_row {\n  border-top-style: solid;\n  border-top-color: #D3D3D3;\n}\n\n#oxmraffbak .gt_first_summary_row.thick {\n  border-top-width: 2px;\n}\n\n#oxmraffbak .gt_last_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#oxmraffbak .gt_grand_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#oxmraffbak .gt_first_grand_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-style: double;\n  border-top-width: 6px;\n  border-top-color: #D3D3D3;\n}\n\n#oxmraffbak .gt_last_grand_summary_row_top {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: double;\n  border-bottom-width: 6px;\n  border-bottom-color: #D3D3D3;\n}\n\n#oxmraffbak .gt_striped {\n  background-color: #FAFAFA;\n}\n\n#oxmraffbak .gt_table_body {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#oxmraffbak .gt_footnotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#oxmraffbak .gt_footnote {\n  margin: 0px;\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#oxmraffbak .gt_sourcenotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#oxmraffbak .gt_sourcenote {\n  font-size: 12px;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#oxmraffbak .gt_left {\n  text-align: left;\n}\n\n#oxmraffbak .gt_center {\n  text-align: center;\n}\n\n#oxmraffbak .gt_right {\n  text-align: right;\n  font-variant-numeric: tabular-nums;\n}\n\n#oxmraffbak .gt_font_normal {\n  font-weight: normal;\n}\n\n#oxmraffbak .gt_font_bold {\n  font-weight: bold;\n}\n\n#oxmraffbak .gt_font_italic {\n  font-style: italic;\n}\n\n#oxmraffbak .gt_super {\n  font-size: 65%;\n}\n\n#oxmraffbak .gt_footnote_marks {\n  font-size: 75%;\n  vertical-align: 0.4em;\n  position: initial;\n}\n\n#oxmraffbak .gt_asterisk {\n  font-size: 100%;\n  vertical-align: 0;\n}\n\n#oxmraffbak .gt_indent_1 {\n  text-indent: 5px;\n}\n\n#oxmraffbak .gt_indent_2 {\n  text-indent: 10px;\n}\n\n#oxmraffbak .gt_indent_3 {\n  text-indent: 15px;\n}\n\n#oxmraffbak .gt_indent_4 {\n  text-indent: 20px;\n}\n\n#oxmraffbak .gt_indent_5 {\n  text-indent: 25px;\n}\n</style>\n<table class=\"gt_table\" data-quarto-disable-processing=\"false\" data-quarto-bootstrap=\"false\">\n  <thead>\n    <tr class=\"gt_heading\">\n      <td colspan=\"5\" class=\"gt_heading gt_title gt_font_normal\" style>2023 Initial ElasticNet Model</td>\n    </tr>\n    <tr class=\"gt_heading\">\n      <td colspan=\"5\" class=\"gt_heading gt_subtitle gt_font_normal gt_bottom_border\" style>Training Model Performance</td>\n    </tr>\n    <tr class=\"gt_col_headings\">\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"deviance\">deviance</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"class\">class</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"auc\">auc</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"mse\">mse</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"mae\">mae</th>\n    </tr>\n  </thead>\n  <tbody class=\"gt_table_body\">\n    <tr><td headers=\"deviance\" class=\"gt_row gt_right\">0.905737</td>\n<td headers=\"class\" class=\"gt_row gt_right\">0.1950725</td>\n<td headers=\"auc\" class=\"gt_row gt_right\">0.8945032</td>\n<td headers=\"mse\" class=\"gt_row gt_right\">0.2811664</td>\n<td headers=\"mae\" class=\"gt_row gt_right\">0.6265235</td></tr>\n  </tbody>\n  \n  \n</table>\n</div>\n```\n\n:::\n:::\n\n\n# REBALANCING OUTCOME\n\n\n::: {.cell}\n\n```{.r .cell-code}\nData_Clean <- recipe(yesno ~.,data = Data_Train) |> \n  themis::step_bsmote(yesno,\n                      over_ratio=0.8) |> \n  prep() |> \n  bake(new_data = NULL) \n\nx_train <- model.matrix(yesno ~.,data = Data_Clean)[,-1]\ny_train <- Data_Clean$yesno\n\nElastic_Upsampled <- cv.glmnet(x=x_train,\n          y=y_train,\n          alpha = 0,\n          family=\"binomial\",\n          standardize = FALSE,\n          nfolds=10)\n\n\nTrained_Performance_2 <- assess.glmnet(Elastic_Upsampled,\n              newx = x_train,\n              newy = y_train,\n              family = \"binomial\",\n              alpha = 0,\n              standardize = FALSE)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nFinalised_Model <- glmnet(x=x_train,\n       y=y_train,\n       family = \"binomial\",\n       alpha = 0,\n       standardize = FALSE,\n       lambda = Elastic_Upsampled$lambda.min)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nX_Test <- model.matrix(yesno ~.,data =Data_Test)[,-1]\nY_Test <- as.numeric(Data_Test$yesno==\"y\")\n\n\nFinal_Prediction <- predict(Final_Model,as.matrix(Data_Test[,-grep(\"\\\\byesno\\\\b\",\n                           names(Data_Test))]),\n        type = \"class\") |> \n  as.data.frame() |> \n  mutate(.pred_class = ifelse(s0 == \"0\",\"y\",\"n\")) |> \n  select(-s0) |> \n  mutate(across(everything(),\n                .fns=\\(x){factor(x,\n                                 level = c(\"n\",\"y\"))}))\n\n\nFinal_Prediction_2 <- predict(Finalised_Model,\n        as.matrix(Data_Test[,-grep(\"\\\\byesno\\\\b\",\n                                   names(Data_Test))]),\n        type = \"class\") |> \n  as.data.frame() |> \n  mutate(.pred_class = ifelse(s0 == \"0\",\"y\",\"n\")) |> \n  select(-s0) |> \n  mutate(across(everything(),\n                .fns=\\(x){factor(x,\n                                 level = c(\"n\",\"y\"))})) \n\n\nFinal_Prediction$truth <- Data_Test$yesno\nFinal_Prediction_2$truth <- Data_Test$yesno\n\nFinal_Prediction <- Final_Prediction |> \n  mutate(across(everything(),\n                .fns=\\(x){factor(x,\n                                 level = c(\"n\",\"y\"))}))\n\n\nFinal_Prediction_2 <- Final_Prediction_2 |> \n  mutate(across(everything(),\n                .fns = \\(x){\n                  factor(x,\n                         level = c(\"n\",\"y\"))\n                }))\n\nFinal_Prediction$truth |> table();Final_Prediction_2$truth |> table()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n  n   y \n697 454 \n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n  n   y \n697 454 \n```\n\n\n:::\n:::\n\n\n:::{.panel-tabset}\n\n## Model 1\n\n\n::: {.cell}\n\n```{.r .cell-code}\nFinal_Prediction |> \n  conf_mat(truth=truth, \n           estimate = .pred_class) |> \n  autoplot()\n```\n\n::: {.cell-output-display}\n![](Index_files/figure-html/unnamed-chunk-1-1.png){width=2100}\n:::\n:::\n\n## Model 2\n\n::: {.cell}\n\n```{.r .cell-code}\nFinal_Prediction_2 |> \n  conf_mat(truth = truth,\n           estimate = .pred_class) |> \n  autoplot()\n```\n\n::: {.cell-output-display}\n![](Index_files/figure-html/unnamed-chunk-2-1.png){width=2100}\n:::\n:::",
    "supporting": [
      "Index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}